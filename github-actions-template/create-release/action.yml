name: Create Release branch

inputs:
  version_bump:
    type: choice
    required: false
    options:
      - major
      - minor
      - patch
    default: patch
    description: 'Major, Minor, or Patch version bump'
  github_path_token:
    type: string
    required: true
    description: 'Github token'

outputs: 
  new_branch_name:
    value: ${{ steps.set_output.outputs.new_branch_name }}
    description: 'New branch name'

runs:
  using: "composite"  
  steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      name: Checkout
      with:
        ref: main
        fetch-depth: 0

    - name: Install Node.js
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1

    - name: Install semver
      run: npm install -g semver
      shell: bash

    - name: Get Latest Release Version
      id: get-version
      shell: bash
      run: |
        RELEASE_BRANCH=$(git branch -r | grep -Eo 'releases/[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
        echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV

    - name: Set Branch Name
      shell: bash
      run: |

        if [ -z "${RELEASE_BRANCH}" ]; then
          NEW_BRANCH_NAME="releases/0.0.1"
        else
          OLD_VERSION=$(echo "${RELEASE_BRANCH}" | sed 's/releases\///')
          
          NEW_VERSION=$(semver --increment ${{ inputs.version_bump }} "${OLD_VERSION}")
          echo "Bumping $OLD_VERSION to $NEW_VERSION"

          NEW_BRANCH_NAME="releases/${NEW_VERSION}"
        fi

        echo "NEW_BRANCH_NAME=${NEW_BRANCH_NAME}" >> $GITHUB_ENV
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        echo "OLD_VERSION=${OLD_VERSION}" >> $GITHUB_ENV

    - name: Create Branch
      shell: bash
      run: |
        git checkout -b $NEW_BRANCH_NAME

    - name: Push Branch
      shell: bash
      run: |
        git push origin $NEW_BRANCH_NAME
        

    - name: Create Repository Release
      shell: bash
      run: |
        gh release create v${{ env.NEW_VERSION }} \
          --title v${{ env.NEW_VERSION }} \
          --target ${{ env.NEW_BRANCH_NAME }} \
          --generate-notes \
          --notes-start-tag v${{ env.OLD_VERSION }} \
          --prerelease
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create Release Variables
      shell: bash
      run: |
        gh variable set CURRENT_UAT_VERSION \
          --body "${{ env.NEW_VERSION }}"
      env:
        GH_TOKEN: ${{ inputs.github_path_token }}

    - name: Set Output
      id: set_output
      shell: bash
      run: echo "new_branch_name=${{ env.NEW_BRANCH_NAME }}" >> $GITHUB_OUTPUT

